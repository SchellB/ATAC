rep("green",6),
"black", rep("blue",3)))
plotMDS(DGE_norm, col=col$col)
# filtering by expression
keep <- filterByExpr(DGE_norm, design, min.count = 20, min.total.count = 15,large.n = 6, min.prop=0.7)
table(keep)
DGE_normfilt <- DGE_norm[keep,]
View(DGE_normfilt)
DGE_normfilt["counts"]
DGE_normfilt[["counts"]]
# heatmap
logcpm <- cpm(DGE_normfilt, log=TRUE, normalized.lib.sizes=TRUE)
heatmap(logcpm)
# model voom
y <- voom(DGE_norm, design, plot = T)
# fitting the linear model
fit <- lmFit(y, design)
# model voom
y <- voom(DGE_normfilt, design, plot = T)
# fitting the linear model
fit <- lmFit(y, design)
head(coef(fit))
# function
calculateDEG <- function(name="AvsB",fit=fit, contrast=c(-1,1,0,0,0), wd=wd){
AvsB <- contrasts.fit(fit, contrast=contrast)
AvsB <- eBayes(AvsB)
print(summary(decideTests(AvsB,method = "separate", adjust.method = "BH", p.value = 0.05,
lfc = 1)))
plotMD(AvsB)
AvsB.table <- topTable(AvsB, sort.by = "P", n = Inf)
print(head(AvsB.table, 20))
write.csv2(AvsB.table,file=paste0(wd,"/Results/",name,".csv"))
return(AvsB.table)
}
## LR Vs HD
LRvsHD <- calculateDEG(name="LRvsHD", fit=fit, contrast=c(-1,1,0,0,0), wd=wd)
## HR Vs HD
HRvsHD<-calculateDEG(name="HRvsHD", fit=fit, contrast=c(-1,0,1,0,0), wd=wd)
## AML Vs HD
AMLvsHD<-calculateDEG(name="AMLvsHD", fit=fit, contrast=c(-1,0,0,1,0), wd=wd)
## LR Vs AML
LRvsAML<-calculateDEG(name="LRvsAML", fit=fit, contrast=c(0,1,0,-1,0), wd=wd)
## HR Vs AML
HRvsAML<-calculateDEG(name="HRvsAML", fit=fit, contrast=c(0,0,1,-1,0), wd=wd)
## HR Vs LR
HRvsLR<-calculateDEG(name="HRvsLR", fit=fit, contrast=c(0,-1,1,0,0), wd=wd)
############## save to Rdata ##################
save(AMLvsHD,LRvsHD,HRvsHD,LRvsAML,HRvsAML,HRvsLR, file="RNAseqTables.Rdata")
# process the data
DEG <- list(LR=subset(LRvsHD$genes,subset=abs(LRvsHD$logFC)>=1&LRvsHD$P.Value<0.05),
HR=subset(HRvsHD$genes,subset=abs(HRvsHD$logFC)>=1&HRvsHD$P.Value<0.05),
AML=subset(AMLvsHD$genes,subset=abs(AMLvsHD$logFC)>=1&AMLvsHD$P.Value<0.05)
#,
#NKalone=subset(NKalonevsHD$genes,subset=abs(NKalonevsHD$logFC)>=1&NKalonevsHD$P.Value<0.01)
)
library(ggvenn)
library(viridis)
ggvenn(
DEG,
fill_color =viridis(3),
show_percentage = FALSE,
stroke_size = 0.5, set_name_size = 4, show_elements = FALSE, text_size=2,label_sep = "\n")
# get output
write.csv2(DEG[["LR"]], file=paste0(wd,"/Results/SignifLRvsHD.csv"))
write.csv2(DEG[["HR"]], file=paste0(wd,"/Results/SignifHRvsHD.csv"))
write.csv2(DEG[["AML"]], file=paste0(wd,"/Results/SignifAMLvsHD.csv"))
## only patho
# process the data
DEG2 <- list(LRversusAML=subset(LRvsAML$genes,subset=abs(LRvsAML$logFC)>=1&LRvsAML$P.Val<0.05),
HRversusAML=subset(HRvsAML$genes,subset=abs(HRvsAML$logFC)>=1&HRvsAML$P.Val<0.05),
HRversusLR=subset(HRvsLR$genes,subset=abs(HRvsLR$logFC)>=1&HRvsLR$P.Val<0.05))
ggvenn(
DEG2,
fill_color =viridis(3),
show_percentage = FALSE,
stroke_size = 0.5, set_name_size = 4, show_elements = FALSE, text_size=2,label_sep = "\n")
# getoutput
write.csv2(DEG2[["LRversusAML"]], file=paste0(wd,"/Results/SignifLRvsAML.csv"))
write.csv2(DEG2[["HRversusAML"]], file=paste0(wd,"/Results/SignifHRvsAML.csv"))
write.csv2(DEG2[["HRversusLR"]], file=paste0(wd,"/Results/SignifHRvsLR.csv"))
library(ggrepel)
library(viridis)
# function
volcano <- function(table=table, name="name",title="title"){
pdf(paste0(wd,"/Output/Volcano_",name,".pdf"))
print(ggplot(data=table,
aes(x=logFC,
y=-log10(P.Value),
label=genes)) +
geom_point() +
theme_minimal() +
geom_text_repel(data=subset(table, abs(logFC)>1&P.Value<0.05), aes(x=logFC,
y=-log10(P.Value),label=genes),
max.overlaps = 50, color="darkgrey") +
geom_vline(xintercept=c(-1, 1), col="red") +
geom_hline(yintercept=-log10(0.05), col="red")+
labs(title=title,
x="log2FC", y="-log10(Pvalue)")+
theme(plot.title = element_text(hjust = 0.5),
axis.title = element_text()))
print(ggplot(data=table,
aes(x=logFC,
y=-log10(P.Value),
label=genes)) +
geom_point() +
theme_minimal() +
geom_point(data=subset(table, abs(logFC)>1&P.Value<0.05),
aes(x=logFC, y=-log10(P.Value)),color="red")+
geom_vline(xintercept=c(-1, 1), col="red") +
geom_hline(yintercept=-log10(0.05), col="red")+
labs(title=title,
x="log2FC", y="-log10(Pvalue)")+
theme(plot.title = element_text(hjust = 0.5),
axis.title = element_text()))
dev.off()
}
## LR vs HD
volcano(table=LRvsHD,name="LRvsHD",title = "Low Risk MDS versus HD")
## HR vs HD
volcano(table=HRvsHD,name="HRvsHD",title = "High Risk MDS versus HD")
## AML vs HD
volcano(table=AMLvsHD,name="AMLvsHD",title = "sAML MDS versus HD")
## LR vs AML
volcano(table=LRvsAML,name="LRvsAML",title = "Low Risk MDS versus AML")
## HR vs AML
volcano(table=HRvsAML,name="HRvsAML",title = "High Risk MDS versus AML")
## HR vs LR
volcano(table=HRvsLR,name="HRvsLR",title = "High Risk MDS versus Low Risk MDS")
fit
## HR&AML Vs HD
HRvsLR<-calculateDEG(name="HR_AMLvsHD", fit=fit, contrast=c(0,-1,0.5,0.5,0), wd=wd)
## HR Vs LR
HRvsLR<-calculateDEG(name="HRvsLR", fit=fit, contrast=c(0,-1,1,0,0), wd=wd)
## HR&AML Vs HD
HR_AMLvsHD<-calculateDEG(name="HR_AMLvsHD", fit=fit, contrast=c(0,-1,0.5,0.5,0), wd=wd)
############## save to Rdata ##################
save(HR_AMLvsHD,AMLvsHD,LRvsHD,HRvsHD,LRvsAML,HRvsAML,HRvsLR, file="RNAseqTables.Rdata")
## HR & AML vs HD
volcano(table=HR_AMLvsHD,name="HR&AMLvsHD",title = "High Risk MDS & sAML versus Healthy donor")
## variables
library(viridis)
cols = list("HD"="blue",
"LR"="green",
"HR"="orange","sAML"="red")
## Heatmap
library(ComplexHeatmap)
library(circlize)
library(rlist)
library(rlist)
DEG_heatmap <- function(data,table,cond,Metadata,cols,name){
DEGgenes <- subset(table, abs(logFC)>1&P.Value<0.05) # DEG
df <- data %>% dplyr::filter(rownames(data)%in% DEGgenes$genes) %>% select(contains(c(cond))) # Expr
Meta <- Metadata %>% filter(sample%in% colnames(df))%>% arrange(group) # Metadata
col_fun = colorRamp2(c(0,10, 50, 100, 150), c("#FDE725FF","#75D054FF","#55C667FF","#404688FF","#440154FF"))
# Create the heatmap annotation
ha <- HeatmapAnnotation(df=Meta$group)
pdf(file=paste0(wd,"/Output/Heatmap",name,".pdf"))
print(Heatmap(as.matrix(df),
name = name, #title of legend
column_title = "Patients", row_title = "Genes",
show_row_dend = FALSE,
top_annotation = ha,
col = col_fun,
row_names_gp = gpar(fontsize = 4) # Text size for row names
))
dev.off()
}
# HR vsHD
DEG_heatmap(data=data, Metadata = Metadata, table=HRvsHD,
name="HRvsHD",cols=cols,cond=c("HD","HR"))
# LR vs HD
DEG_heatmap(data=data, Metadata = Metadata, table=LRvsHD,
name="LRvsHD",cols=cols,cond=c("HD","LR"))
# AML vs HD
DEG_heatmap(data=data, Metadata = Metadata, table=AMLvsHD,
name="AMLvsHD",cols=cols,cond=c("HD","AML"))
# LR vs AML
DEG_heatmap(data=data, Metadata = Metadata, table=LRvsAML,
name="LRvsAML",cols=cols,cond=c("LR","AML"))
# HR vs AML
DEG_heatmap(data=data, Metadata = Metadata, table=HRvsAML,
name="HRvsAML",cols=cols,cond=c("HR","AML"))
# HR vs LR
DEG_heatmap(data=data, Metadata = Metadata, table=HRvsLR,
name="HRvsLR",cols=cols,cond=c("HR","LR"))
View(DGE_normfilt)
table <- DGE_normfilt[["counts"]]
table["AADAC",]
# set working directory
wd <- getwd()
# load the data using readxl
library(readxl)
Data <- read_excel(paste0(wd,"/Data/5000Inserm_DESeq2_results_allgenes.xlsx"))
# Select the gene expression and convert to expr matrix
library(dplyr)
library(tidyverse)
data <- Data %>% distinct(`Gene Symbol`,
.keep_all=TRUE) %>% dplyr::select(2,
8:31) %>% column_to_rownames('Gene Symbol') %>% relocate(c("23_HD-1",
"24_HD-2",
"25_HD-3"),
.after = "03_HD-6")
# Create metadata and small metadata
Metadata <- data.frame(sample=colnames(Data[,8:31]),
group=c(rep("HD",6),rep("LR",5),rep("HR",6),rep("sAML",6),"NKalone"),
category=c(rep("HD",6),rep("MDS",11),rep("AML",6),"NKalone"))
small_data <- data %>% select(c("01_HD-4","02_HD-5","23_HD-1","24_HD-2","25_HD-3",
"10_HR-1","11_HR-2","12_HR-3","13_HR-4","14_HR-5"))
Metadata_small <- data.frame(sample=colnames(small_data),
group=c(rep("HD",5),rep("HR",5)))
# calculate Factor analysis
library("factoextra")
library("FactoMineR")
# 03 - PCA ####
res.pca <- PCA(t(data))
# plot
# plot variables Factor analysis
fviz_pca_var(res.pca)
# individuals
fviz_pca_ind(res.pca)
# individuals
fviz_pca_ind(res.pca,col.ind = Metadata$group)
?fviz_pca_ind
# individuals
fviz_pca_ind(res.pca,col.ind = Metadata$group,
addEllipses =TRUE, palette = viridis(5))
# individuals
fviz_pca_biplot(res.pca,col.ind = Metadata$group,
addEllipses =TRUE, palette = viridis(5))
# individuals
fviz_pca_biplot(res.pca,col.ind = Metadata$group,
addEllipses =TRUE, palette = viridis(5),
col.var = contrib, alpha.var=0.3)
# individuals
fviz_pca_biplot(res.pca,col.ind = Metadata$group,
addEllipses =TRUE, palette = viridis(5),
col.var = "contrib", alpha.var=0.3)
# individuals
fviz_pca_biplot(res.pca,col.ind = Metadata$group,
addEllipses =TRUE, palette = viridis(5),
fill.var = "contrib", alpha.var=0.3)
# select genes with high cos2
gene.contrib.table <- as.data.frame(res.pca$var$contrib)
genes.interest <- top_n(gene.contrib.table,100,Dim.1)
# do pca on these genes
interest.data <- subset(data, subset=rownames(data)%in%rownames(genes.interest))
# 03 - ploting genes of interest ####
library(tidyr)
long_df <- interest.data %>% rownames_to_column("genes")%>% gather(Key, Value,-genes)
library(viridis)
ggplot(data = long_df, aes(y=genes,x=Value))+
geom_point()+
scale_color_manual(values = viridis(3), labels=Metadata$group, guide = "legend")+
theme_minimal()
View(long_df)
long_df <- long_df %>% gather(Key, Value,-X) %>% mutate(group=case_when(
grepl("HR", Key) ~ "HR",
grepl("HD", Key) ~ "HD",
grepl("sAML", Key) ~ "sAML",
grepl("LR", Key) ~ "LR",
.default = "NK alone"
))
long_df <- long_df %>% gather(Key, Value,-genes) %>% mutate(group=case_when(
grepl("HR", Key) ~ "HR",
grepl("HD", Key) ~ "HD",
grepl("sAML", Key) ~ "sAML",
grepl("LR", Key) ~ "LR",
.default = "NK alone"
))
long_df <- interest.data %>% rownames_to_column("genes")%>% gather(Key, Value,-genes)
long_df <- long_df  %>% mutate(group=case_when(
grepl("HR", Key) ~ "HR",
grepl("HD", Key) ~ "HD",
grepl("sAML", Key) ~ "sAML",
grepl("LR", Key) ~ "LR",
.default = "NK alone"
))
library(viridis)
ggplot(data = long_df, aes(y=genes,x=Value, color=group))+
geom_point()+
scale_color_manual(values = viridis(5), labels=Metadata$group, guide = "legend")+
theme_minimal()
ggplot(data = long_df, aes(y=genes,x=Value, color=group))+
geom_point()+
scale_color_manual(values = viridis(5), labels=group, guide = "legend")+
theme_minimal()
ggplot(data = long_df, aes(y=genes,x=Value, color=group))+
geom_point()+
scale_color_manual(values = viridis(5), aes(labels=group), guide = "legend")+
theme_minimal()
setwd("D:/Berenice/ATAC")
# directory
wd <- getwd()
# ATAC
library(readr)
ATAC <- read.csv2("Results/Normalized.Counts.csv")
View(ATAC)
library(tidyverse)
setwd("D:/Berenice")
githubdir <- ("D:/Berenice")
setwd(wd)
getwd()
RNA <- read.csv2(paste0(githubdir,"/RNAseqNKValeria/Results/Normalized.Counts.csv"))
View(RNA)
library(tidyverse)
ATAC <- ATAC %>% column_to_rownames(X)
library(tidyverse)
RNA <- RNA %>% column_to_rownames(X)
ATAC <- ATAC %>% column_to_rownames('X')
RNA <- RNA %>% column_to_rownames('X')
# load package
library(KEGGREST)
library(org.Hs.eg.db)
library(tidyverse)
# find all pathways
hsa_path_eg  <- keggLink("pathway", "hsa") %>%
tibble(pathway = ., eg = sub("hsa:", "", names(.)))
# find all genes
hsa_kegg_anno <- hsa_path_eg %>%
mutate(
symbol = mapIds(org.Hs.eg.db, eg, "SYMBOL", "ENTREZID"),
ensembl = mapIds(org.Hs.eg.db, eg, "ENSEMBL", "ENTREZID")
)
# find pathway description
hsa_pathways <- keggList("pathway", "hsa") %>%
tibble(pathway = names(.), description = .)
View(hsa_pathways)
View(hsa_kegg_anno)
# find the pathway hsa04650
genes <- hsa_kegg_anno["path:hsa04650",]
View(genes)
# find the pathway hsa04650
genes <- hsa_kegg_anno["path:hsa04650",]
# find the pathway hsa04650
genes <- hsa_kegg_anno["path:hsa04650"]
# find the pathway hsa04650
genes <- hsa_kegg_anno[hsa_kegg_anno$pathway=="path:hsa04650",]
genes
# get the expression from the genes
table_rna <- RNA[rownames(RNA)%in%genes$symbol,]
# get the accessibility from the genes
table_atac <- ATAC[rownames(ATAC)%in%genes$symbol,]
# merge both
table <- merge(table_atac,table_rna)
View(table)
# merge both
table <- merge(table_atac,table_rna,by="row.names")
# long data frame
library(tidyr)
table %>% gather(Key, Value)
table_rna %>% gather(Key, Value)
View(table_rna)
ATAC <- read.csv2("Results/Normalized.Counts.csv")
# RNA
RNA <- read.csv2(paste0(githubdir,"/RNAseqNKValeria/Results/Normalized.Counts.csv"))
# get the expression from the genes
table_rna <- RNA[RNA$X%in%genes$symbol,]
table_rna %>% gather(Key, Value,-X)
# get the accessibility from the genes
table_atac <- ATAC[ATAC$X%in%genes$symbol,]
table_rna <- table_rna %>% gather(Key, Value,-X)
table_atac <- table_atac %>% gather(Key, Value,-X)
View(table_atac)
View(RNA)
gsub("_.*","",colnames(RNA))
gsub(".*_","",colnames(RNA))
RNA[,2:length(RNA)]
colnames(RNA) <- c(X,gsub(".*_","",colnames(RNA[,2:length(RNA)])))
colnames(RNA) <- c("X",gsub(".*_","",colnames(RNA[,2:length(RNA)])))
# get the expression from the genes
table_rna <- RNA[RNA$X%in%genes$symbol,]
table_rna <- table_rna %>% gather(Key, Value,-X)
# merge both
table <- merge(table_atac,table_rna,by=c("X","Key"))
View(table)
# merge both
table <- merge(table_atac,table_rna,by=c("X","Key"), suffixes=c("ATAC","RNA"))
# merge both
table <- merge(table_atac,table_rna,by=c("X","Key"), suffixes=c("ATAC","RNA")) %>% mutate(group=case_when(
grepl("HR", Key) ~ "HR",
grepl("HD", Key) ~ "HD",
grepl("sAML", Key) ~ "sAML",
.default = "NK alone"
))
# plot
library(ggplot2)
ggplot(data = table,aes(x=ValueATAC,y=ValueRNA,color=group))+
geom_point()+theme_minimal()+
facet_wrap(~"X")
ggplot(data = table,aes(x=ValueATAC,y=ValueRNA,color=group))+
geom_point()+theme_minimal()+
facet_wrap(~X)+ scale_color_manual(values=viridis(5))
ggplot(data = table,aes(x=ValueATAC,y=ValueRNA,color=group))+
geom_point()+theme_minimal()+
facet_wrap(~X)+ scale_color_manual(values=viridis(4))
load("ATAC.Rdata")
DEG_heatmap <- function(data,table,cond,Metadata,cols,name){
DEGgenes <- subset(table, abs(logFC)>1&P.Value<0.05) # DEG
df <- data %>% dplyr::filter(rownames(data)%in% DEGgenes$genes) %>% select(contains(c(cond))) # Expr
Meta <- Metadata %>% filter(sample%in% colnames(df))%>% arrange(group) # Metadata
col_fun = colorRamp2(c(0,10, 50, 100, 150), c("#FDE725FF","#75D054FF","#55C667FF","#404688FF","#440154FF"))
# Create the heatmap annotation
ha <- HeatmapAnnotation(df=Meta$group)
pdf(file=paste0(wd,"/Output/Heatmap",name,".pdf"))
print(Heatmap(as.matrix(df),
name = name, #title of legend
column_title = "Patients", row_title = "Genes",
show_row_dend = FALSE,
top_annotation = ha,
col = col_fun,
row_names_gp = gpar(fontsize = 4) # Text size for row names
))
dev.off()
}
# HR & AML vs HD
DEG_heatmap(data=data, Metadata = Metadata, table=HR_AMLvsHD,
name="HR&AMLvsHD",cols=cols,cond=c("HR","AML","LR"))
# Import Data
library(readxl)
data_genes <- read_excel("Data/01W5Inserm_ATAC_genes.xlsx",
col_types = c("text", "text", "text",
"numeric", "numeric", "numeric",
"text", "numeric", "text", "text",
"text", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "text", "numeric", "text",
"text", "text", "text", "numeric",
"text"))
# 03 - Calculated DEG ###
# process the data
library(dplyr)
library(tidyverse)
data <- data_genes  %>% column_to_rownames(var="Gene Name") %>% dplyr::select(c(30:46))
patients <- gsub("_ATAC.*","",colnames(data))
colnames(data) <- gsub(".*[[:digit:]][[:digit:]]_INSERM_","",patients)
# create a metadata file
Metadata <- data.frame(sample=colnames(data),
group=c(rep("HR",6),rep("AML",5),rep("HD",5),"NKalone"))
Metadata$group <- factor(Metadata$group, levels=c("HD","HR","AML", "NKalone"))
## data
data <-read_csv2("Results/Normalized.Counts.csv")
data <- data %>% column_to_rownames('...1')
## variables
library(viridis)
cols = list("HD"="blue",
"HR"="orange","sAML"="red")
## Heatmap
library(ComplexHeatmap)
library(circlize)
library(rlist)
DEG_heatmap <- function(data,table,cond,Metadata,cols,name){
DEGgenes <- subset(table, abs(logFC)>1&P.Value<0.05) # DEG
df <- data %>% dplyr::filter(rownames(data)%in% DEGgenes$genes) %>% select(contains(c(cond))) # Expr
Meta <- Metadata %>% filter(sample%in% colnames(df))%>% arrange(group) # Metadata
col_fun = colorRamp2(c(0,10, 50, 100, 150), c("#FDE725FF","#75D054FF","#55C667FF","#404688FF","#440154FF"))
# Create the heatmap annotation
ha <- HeatmapAnnotation(df=Meta$group)
pdf(file=paste0(wd,"/Output/Heatmap",name,".pdf"))
print(Heatmap(as.matrix(df),
name = name, #title of legend
column_title = "Patients", row_title = "Genes",
show_row_dend = FALSE,
top_annotation = ha,
col = col_fun,
row_names_gp = gpar(fontsize = 4) # Text size for row names
))
dev.off()
}
# HR & AML vs HD
DEG_heatmap(data=data, Metadata = Metadata, table=HR_AMLvsHD,
name="HR&AMLvsHD",cols=cols,cond=c("HR","AML","LR"))
# HR & AML vs HD
DEG_heatmap(data=data, Metadata = Metadata, table=HR_AMLvsHD_ATAC,
name="HR&AMLvsHD",cols=cols,cond=c("HR","AML","LR"))
DEG_heatmap <- function(data,table,cond,Metadata,cols,name){
DEGgenes <- subset(table, abs(logFC)>1&P.Value<0.05) # DEG
df <- data %>% dplyr::filter(rownames(data)%in% DEGgenes$genes) %>% dplyr::select(contains(c(cond))) # Expr
Meta <- Metadata %>% filter(sample%in% colnames(df))%>% arrange(group) # Metadata
col_fun = colorRamp2(c(0,10, 50, 100, 150), c("#FDE725FF","#75D054FF","#55C667FF","#404688FF","#440154FF"))
# Create the heatmap annotation
ha <- HeatmapAnnotation(df=Meta$group)
pdf(file=paste0(wd,"/Output/Heatmap",name,".pdf"))
print(Heatmap(as.matrix(df),
name = name, #title of legend
column_title = "Patients", row_title = "Genes",
show_row_dend = FALSE,
top_annotation = ha,
col = col_fun,
row_names_gp = gpar(fontsize = 4) # Text size for row names
))
dev.off()
}
# HR & AML vs HD
DEG_heatmap(data=data, Metadata = Metadata, table=HR_AMLvsHD_ATAC,
name="HR&AMLvsHD",cols=cols,cond=c("HR","AML","LR"))
# HR & AML vs HD
DEG_heatmap(data=data, Metadata = Metadata, table=HR_AMLvsHD_ATAC,
name="HR&AMLvsHD",cols=cols,cond=c("HR","AML","HD"))
?facet_wrap
ggplot(data = table,aes(x=ValueATAC,y=ValueRNA,color=group))+
geom_point()+theme_minimal()+
facet_wrap(~X,scales = "free_y")+ scale_color_manual(values=viridis(4))
